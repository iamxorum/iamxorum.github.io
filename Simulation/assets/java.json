[
  {
    "id": 1,
    "question": "Fie următoarea clasă Java:\nclass C\n{\nint a;\nfloat x;\nboolean b;\n}\nStabiliţi care dintre următoarele linii de cod este corectă:",
    "answers": [
      "a) C ob = new C(1);",
      "b) C ob = new C(1,1.0);",
      "c) C ob = new C();",
      "d) C ob = new C(1,1.0,true);"
    ],
    "correctAnswerIndexes": [2]
  },
  {
    "id": 2,
    "question": "Fie următorul program Java:\nclass C\n{\npublic static int a=1;\n}\npublic class test\n{\npublic static void main(String[] args)\n{\nC ob=new C();\nC.a++;\nob.a++;\nSystem.out.println(C.a);\n}\n}\nDupă executarea programului, va fi afişată valoarea:",
    "answers": [
      "a) 3",
      "b) 2",
      "c) 1",
      "d) nicio valoare, se obține o eroare la executare."
    ],
    "correctAnswerIndexes": [0]
  },
  {
    "id": 3,
    "question": "Fie următorul program Java:\nclass C{public static int a=1;}\npublic class teste_grila\n{\npublic static void main(String[] args)\n{\nC ob1=new C();\nC ob2=new C();\nob1.a++;\nSystem.out.println(ob2.a);\n}\n}\nDupă executarea programului, va fi afişată valoarea:",
    "answers": [
      "a) 0;",
      "b) 2;",
      "c) 1;",
      "d) nicio valoare, se obține o eroare la executare."
    ],
    "correctAnswerIndexes": [1]
  },
  {
    "id": 4,
    "question": "Un program Test scris în limbajul Java poate fi compilat folosind comanda:",
    "answers": [
      "a) javac Test",
      "b) java Test.java",
      "c) javac Test.class",
      "d) javac Test.java"
    ],
    "correctAnswerIndexes": [3]
  },
  {
    "id": 5,
    "question": "Un program Test scris în limbajul Java şi compilat, poate fi rulat folosind comanda:",
    "answers": [
      "a) javac Test.java",
      "b) java Test",
      "c) java Test.class",
      "d) java Test.java"
    ],
    "correctAnswerIndexes": [1]
  },
  {
    "id": 6,
    "question": "În Java o clasă poate extinde:",
    "answers": [
      "a) cel mult o interfaţă",
      "b) oricâte clase",
      "c) cel mult o clasă",
      "d) oricâte interfeţe"
    ],
    "correctAnswerIndexes": [2]
  },
  {
    "id": 7,
    "question": "În Java o interfaţă poate extinde:",
    "answers": [
      "a) cel mult o interfată",
      "b) oricâte interfeţe",
      "c) cel mult o clasă",
      "d) oricâte clase"
    ],
    "correctAnswerIndexes": [1]
  },
  {
    "id": 8,
    "question": "În Java o clasă poate implementa:",
    "answers": [
      "a) o clasă",
      "b) oricâte clase",
      "c) o interfaţă",
      "d) oricâte interfeţe"
    ],
    "correctAnswerIndexes": [3]
  },
  {
    "id": 9,
    "question": "Fie următorul program Java:\nclass A\n{\npublic A() { System.out.print(\"A\"); }\n}\nclass B extends A\n{\npublic B() { System.out.print(\"B\"); }\n}\nclass C extends B\n{\npublic C() { System.out.println(\"C\"); }\n}\npublic class test\n{\npublic static void main(String[] args)\n{\nC ob=new C();\n}\n}\nDupă executarea programului, se va afişa:",
    "answers": [
      "a) A B C",
      "b) A",
      "c) C B A",
      "d) C"
    ],
    "correctAnswerIndexes": [0]
  },
  {
    "id": 10,
    "question": "Fie următorul program Java:\nclass A\n{\npublic int x=1;\npublic A() { x++; }\n}\nclass B extends A\n{\npublic B() { x++; }\n}\nclass C extends B\n{\npublic int x=1;\npublic C() { x++; }\n}\npublic class test\n{\npublic static void main(String[] args)\n{\nB b=new B();\nC c=new C();\nSystem.out.println(b.x+\" \"+c.x);\n}\n}\nDupă executarea programului, se va afişa:",
    "answers": [
      "a) 3 4",
      "b) 3 2",
      "c) 2 2",
      "d) 3 3"
    ],
    "correctAnswerIndexes": [1]
  },
  {
    "id": 11,
    "question": "Fie următorul program Java:\nclass A\n{\nint x=0;\npublic A(int n) { x=n; }\n}\nclass B extends A\n{\nint x=1;\npublic B(int n) { super(n); }\n}\npublic class test\n{\npublic static void main(String[] args)\n{\nA a=new A(5);\nB b=new B(7);\nSystem.out.println(a.x+\" \"+b.x);\n}\n}\nDupă executarea programului, se va afişa:",
    "answers": [
      "a) 05",
      "b) 51",
      "c) 57",
      "d) 01"
    ],
    "correctAnswerIndexes": [1]
  },
  {
    "id": 12,
    "question": "Fie următorul program Java:\nclass A{\nstatic void staticMethod() {\nSystem.out.println(\"Metoda statica\");\n}\n}\npublic class Test{\npublic static void main(String[] args){\nA a = null;\na.staticMethod();\n}\n}\nDupă executarea programului, se va afişa:",
    "answers": [
      "a) programul afișează mesajul Metoda statica",
      "b) se obține o eroare la compliare cauzată de faptul ca o metodă statică nu poate fi invocată\nfolosind o referintă",
      "c) se obține la executare excepția java.lang.NullPointerException"
    ],
    "correctAnswerIndexes": [0]
  },
  {
    "id": 13,
    "question": "Program următor:\nclass A\n{\nint x=10;\nstatic int y=20;\n}\nclass B extends A\n{\nint x=30;\nstatic int y=40;\n}\npublic class Test\n{\npublic static void main(String[] args) {\nA ob = new B();\nSystem.out.println(ob.x+\" \"+ob.y);\n}\n}\nAfișează",
    "answers": [
      "a) 10 20",
      "b) 30 40",
      "c) 30 20",
      "d) eroare la executare"
    ],
    "correctAnswerIndexes": [0]
  },
  {
    "id": 14,
    "question": "Care dintre următoarele afirmații este adevărată pentru o metodă de tip final?",
    "answers": [
      "a) poate fi și suprascrisă și supraîncărcată",
      "b) poate fi suprascrisă, dar nu poate fi supraîncărcată",
      "c) nu poate fi nici suprascrisă și nici supraîncărcată",
      "d) nu poate fi suprascrisă, dar poate fi supraîncărcată"
    ],
    "correctAnswerIndexes": [3]
  },
  {
    "id": 15,
    "question": "Programul următor:\npublic class Test {\nstatic void test(int a[]){\na[0] = 100;\na = new int[]{10,20,30,40,50};\na[1] = 200;\nSystem.out.println(Arrays.toString(a));\n}\npublic static void main(String[] args){\nint []v = {1,2,3,4,5,6,7};\ntest(v);\nSystem.out.println(Arrays.toString(v));\n}\n}\nAfișează",
    "answers": [
      "a) [10, 200, 30, 40, 50]\n[1 2, 3, 4, 5, 6, 7]",
      "b) [10, 200, 30, 40, 50]\n[100, 2, 3, 4, 5, 6, 7]",
      "c) [10, 20, 30, 40, 50]\n[100, 2, 3, 4, 5, 6, 7]",
      "d) [10, 20, 30, 40, 50]\n[100, 2, 3, 4, 5, 6, 7]"
    ],
    "correctAnswerIndexes": [1]
  },
  {
    "id": 16,
    "question": "Considerăm următorul program Java:\nclass C\n{\nint a,b;\npublic C(int x, int y){a=x; b=y;}\nvoid f()\n{\nif(a<b) { a++; b--; g(); }\n}\nvoid g()\n{\nif(b>=a) { a++; b--; f(); }\n}\nvoid afisare() { System.out.println(a+\" \"+b);}\n}\npublic class teste_grila\n{\npublic static void main(String[] args)\n{\nC ob = new C(2,10);\nob.f(); ob.g();\nob.afisare();\n}\n}\nDupă executarea programului, pe ecran se va afişa:",
    "answers": [
      "a) 57",
      "b) 6 6",
      "c) 2 10",
      "d) 7 5"
    ],
    "correctAnswerIndexes": [3]
  },
  {
    "id": 17,
    "question": "Considerăm următorul program Java:\nclass C\n{\nstatic int x = 0;\nstatic int f() { return (++x)*(x--); }\n}\npublic class teste_grila\n{\npublic static void main(String[] args)\n{\nSystem.out.println(C.f()+\" \"+C.f()+\" \"+C.f());\n}\n}\nDupă executarea programului, pe ecran se va afişa:",
    "answers": [
      "a) 1 1 1",
      "b) 1 2 3",
      "c) 1 2 6",
      "d) 0 0 0"
    ],
    "correctAnswerIndexes": [0]
  },
  {
    "id": 18,
    "question": "Considerăm următorul program Java:\nclass C\n{\nstatic int x=0;\nstatic void f()\n{\nx = (++x)*(x--);\nSystem.out.print(x+\" \");\n}\n}\npublic class teste_grila\n{\npublic static void main(String[] args)\n{\nC.f();C.f();C.f();\n}\n}\nDupă executarea programului, pe ecran se va afişa:",
    "answers": [
      "a) 0 0 0",
      "b) 1 4 25",
      "c) 1 -1 1",
      "d) 2 4 16"
    ],
    "correctAnswerIndexes": [1]
  },
  {
    "id": 19,
    "question": "Un fir de execuţie poate intra în starea \"blocat\" (blocked) astfel:",
    "answers": [
      "a) prin apelul metodei sleep();",
      "b) automat de către sistemul de operare;",
      "c) prin apelul metodei block();",
      "d) prin apelul metodei wait()."
    ],
    "correctAnswerIndexes": [0,3]
  },
  {
    "id": 20,
    "question": "Fie următorul program Java:\nclass Fir implements Runnable{\nint x;\npublic Fir(int x){\nthis.x = x;\n}\npublic void run(){\nfor (int i = 0; i < 10; i++) System.out.print(x);\n}\npublic static void main(String args[]) throws\nInterruptedException{\nFir obj1 = new Fir(1);\nFir obj2 = new Fir(2);\nThread t1 = new Thread(obj1);\nThread t2 = new Thread(obj2);\nt1.start();\nt2.start();\nt2.join();\nSystem.out.print(3);\n}\n}\nDupă executarea programului, poate fi afişat un număr format din:",
    "answers": [
      "a) 10 cifre egale cu 1, 10 cifre egale cu 2 și o cifră egală cu 3, cifrele fiind în orice\nordine posibilă",
      "b) 10 cifre egale cu 1, 10 cifre egale cu 2 și o cifră egală cu 3, dar toate cifrele egale\ncu 2 se vor afla înaintea cifrei 3",
      "c) 10 cifre egale cu 1, 10 cifre egale cu 2 și o cifră egală cu 3, dar toate cifrele egale\ncu 1 sau 2 se vor afla înaintea cifrei 3",
      "d) 10 cifre egale cu 1, urmate de 10 cifre egale cu 2 și la sfârșit o cifră egală cu 3"
    ],
    "correctAnswerIndexes": [2]
  },
  {
    "id": 21,
    "question": "Considerăm următorul program Java:\nclass Sir{\nprivate String sir;\npublic Sir(String sir){\nthis.sir = sir;\n}\npublic void modificaSir(String sir){\nthis.sir = sir;\n}\npublic void modificaSir(Sir sir){\nsir = new Sir(\"Mihai\");\n}\npublic String getSir(){\nreturn sir;\n}\n}\npublic class Test {\npublic static void main(String[] args){\nSir s = new Sir(\"Ion\");\nSir t = new Sir(\"Alex\");\ns.modificaSir(\"Matei\");\nt.modificaSir(new Sir(\"Dan\"));\ns.modificaSir(t);\nSystem.out.println(s.getSir() + \" \" + t.getSir());\n}\n}\nDupă executarea programului, va fi afişată valoarea:",
    "answers": [
      "a) Matei Dan",
      "b) Dan Dan",
      "c) Matei Alex",
      "d) Alex Dan"
    ],
    "correctAnswerIndexes": [2]
  },
  {
    "id": 22,
    "question": "Prin modalitatea sa de tratare a excepţiilor, Java oferă următoarele avantaje faţă demecanismul tradiţional de tratare a erorilor:",
    "answers": [
      "a) există o metodă care se ocupăde acest lucru;",
      "b) separarea codului pentru tratarea unei erori de codul în care ea poate sa apară;",
      "c) propagarea unei erori pâna la un analizor de excepţii corespunzător;",
      "d) gruparea erorilor dupa tipul lor."
    ],
    "correctAnswerIndexes": [1,2,3]
  },
  {
    "id": 23,
    "question": "O subclasă a unei clase abstracte poate fi instanţiată numai dacă:",
    "answers": [
      "a) se foloseşte cuvantul cheie abstract;",
      "b) suprascrie fiecare metodă declarată abstractă în superclasa sa şi furnizeaza implementări pentru toate acestea;",
      "c) se foloseşte moştenirea multiplă;",
      "d) subclasă abstractă nu poate fi instanţiată."
    ],
    "correctAnswerIndexes": [1]
  },
  {
    "id": 24,
    "question": "Care este rolul declaraţiilor import?",
    "answers": [
      "a) Permite referireaclaselorfărăutilizareade prefixe;",
      "b) Permite importul imaginilor folosite;",
      "c) Elimină necesitatea declarării variabilelor;",
      "d) Elimină apelurile directe ale funcţiilor fără clase."
    ],
    "correctAnswerIndexes": [0]
  },
  {
    "id": 25,
    "question": "Considerăm următorul program Java:\nclass Calcul_1{\nvoid calcul(int a, int b){\nSystem.out.print(a + b + \" \");\n}\n}\nclass Calcul_2 extends Calcul_1{\nvoid calcul(int a, int b){\nSystem.out.print(a - b + \" \");\n}\n}\nclass Calcul_3 extends Calcul_2{\nvoid calcul(int a, int b){\nSystem.out.print(a * b + \" \");\n}\n}\npublic class Test{\npublic static void main(String[] args){\nCalcul_1 x = new Calcul_3();\nx.calcul(1, 2);\nCalcul_2 y = (Calcul_2) x;\ny.calcul(3, 4);\nCalcul_3 z = (Calcul_3) y;\nz.calcul(5, 6);\n}\n}\nDupă executarea programului, va fi afişată valoarea:",
    "answers": [
      "a) 2 12 30",
      "b) 3 -1 30",
      "c) 3 7 11",
      "d) 2 7 11"
    ],
    "correctAnswerIndexes": [0]
  },
  {
    "id": 26,
    "question": "Care dintre liniile de mai jos realizează atribuirea şirului „Hello Java” variabilei s ?",
    "answers": [
      "a) String s = \"Hello Java\";",
      "b) String s[] = \"Hello Java\";",
      "c) new String s = \"Hello Java\";",
      "d) String s = new String(\"Hello Java\");"
    ],
    "correctAnswerIndexes": [0,3]
  },
  {
    "id": 27,
    "question": "Ce se afisează dacă se execută următorul cod Java:\nString s = new String( \"Computer\" );\nif( s == \"Computer\" )\nSystem.out.println( \"Equal A\" );\nif( s.equals( \"Computer\" ) )\nSystem.out.println( \"Equal B\" );",
    "answers": [
      "a) Eroare la complilare, deoarece operatorul == nu se poate aplica pentru tipul String",
      "b) Se afisează mesajul “Equal A”",
      "c) Se afisează mesajul “Equal B”",
      "d) Se afişează ambele mesaje, “Equal A” , repsectiv “Equal B”"
    ],
    "correctAnswerIndexes": [2]
  },
  {
    "id": 28,
    "question": "În Java, metoda clone() a clasei Object",
    "answers": [
      "a) Creeaza un obiect nou al clasei folosind constructorul implicit",
      "b) Creeaza şi returnează o copie a obiectului curent",
      "c) Returneaza codul asociat constructorului implicit",
      "d) Testează dacă obiectul specificat este o clonă a obiectului current"
    ],
    "correctAnswerIndexes": [1]
  },
  {
    "id": 29,
    "question": "Un fir de executare Java este",
    "answers": [
      "a) O instanţă a unei clase derivate din clasa Thread",
      "b) O instanţă a unei clase care implementează interfaţa Runnable",
      "c) Fie un obiect al unei clase a carei superclasă este clasa Thread, fie un obiect al unei clase care implementează interfata Runnable"
    ],
    "correctAnswerIndexes": [0,1,2]
  },
  {
    "id": 30,
    "question": "Fie următorul program Java:\npublic class Asignare {\npublic static void main(String args[]){\nint a = 3;int b = (a = 2) * a;int c = b * (b = 5) ;\nSystem.out.println(\"a = \" + a + \", b = \" + b + \", c = \" +\nc);}}\nCe va afişa acesta la execuţie?\n",
    "answers": [
      "a) a = 2, b = 4, c = 20",
      "b) a = 2, b = 5, c = 20",
      "c) a = 2, b = 5, c = 25",
      "d) a = 3, b = 6, c = 30"
    ],
    "correctAnswerIndexes": [1]
  },
  {
    "id": 31,
    "question": "Urmatorul subprogram Java:\nint as=3, bs=2, cs=4;\nSystem.out.print(((as < bs++) & (cs++ < bs)) + \" \");\nSystem.out.println(as + \" \" + bs + \" \" + cs);\nSystem.out.print(((as < bs++) && (os++ < bs++)) + \" \");\nSystem.out.println(as + \" \" + bs + \" \" + cs);\nAfişează :\n",
    "answers": [
      "a) Eroare la compilare: nu se poate aduna o valoare booleana cu un String;",
      "b) Subprogramul se compilează şi la execuţie afisează :false 3 3 5 false 3 4 4",
      "c) Subprogramul se compileaza şi la execuţie afisează:false 3 3 5 false 3 4 5",
      "a) Subprogramul se compileaza şi la execuţie afisează false 3 3 5 false 3 5 6"
    ],
    "correctAnswerIndexes": [2]
  },
  {
    "id": 32,
    "question": "Considerăm următorul program Java:\npublic class test\n{\npublic static void main(String args[])\n{\nint v[ ]={-2,4,-5,-6,0,2},suma=0,i;\nfor(i=0;i<5;i++)\nif(v[i]<-2) suma+=v[i];\nSystem.out.println(suma);\n}\n}\nDupă executarea programului, pe ecran se va afişa:\n",
    "answers": [
      "a) -7",
      "b) 0",
      "c) -11",
      "d) -13"
    ],
    "correctAnswerIndexes": [2]
  },
  {
    "id": 33,
    "question": "Secvenţa uramatoare:\npublic class test {\npublic static void main(String args[]){\nString sir = \"Programare in Java, C++ este usoara\" ;\nString atom[]= sir.split(\" \") ;\nSystem.out.println(atom.length) ;\n}}\nAfisează:\n",
    "answers": [
      "a) Eroare la compliare pentru ca nu se specifica numarul de elemente ale tabloului atom",
      "b) 6",
      "c) 7",
      "d) 8"
    ],
    "correctAnswerIndexes": [1]
  },
  {
    "id": 34,
    "question": "Secvenţa uramatoare:\npublic class test{\npublic static void main(String args[]){\nString sir = \"Programare in Java, C++ este usoara\" ;\nString atom[]= sir.split(\" \") ;\nSystem.out.println(atom[0].length()) ;\n}}\nAfisează:\n",
    "answers": [
      "Eroare la compliare pentru ca nu se specifica numarul de elemente ale tabloului atom",
      "b) 6",
      "c) 10",
      "d) 9"
    ],
    "correctAnswerIndexes": [2]
  },
  {
    "id": 35,
    "question": "Ce se va afişa la execuţia urmatorului program Java?\ninterface I1{\nfloat x=2.3f;\n}\npublic class Test implements I1{\npublic static void main(String [] args){\nSystem.out.print(x+\" \");\nx=6.7f;\nSystem.out.print(x);\n}\n}\n",
    "answers": [
      "a) Va aparea eroare la compilare deoarece valoarea variabilei x nu se mai poatemodifica;",
      "b) La execuţie se va afişa: 2.3f 6.7f;",
      "c) La execuţie se va afişa: 2.3f 2.3f;",
      "d) La execuţie se va afişa: 2.3 6.7;"
    ],
    "correctAnswerIndexes": [0]
  },
  {
    "id": 36,
    "question": "Urmatorul program Java:\nclass C1{\nint x=1;\nvoid f(int x){\nthis.x=x;}\nint getX_C1(){\nreturn x;}}\nclass C2 extends C1{\nfloat x=5.0f;\nint f(int x){\nsuper.f((int)x);}\nfloat getX_C2(){\nreturn x;}}\npublic class Test{\npublic static void main(String []args){\nC2 obiect = new C2();\nobiect.f(4);\nSystem.out.print(obiect.getX_C2() + \" \");\nSystem.out.println(obiect.getX_C1());}}\nAfişează:\n",
    "answers": [
      "a) Programul este corect şi va afişa la execuţie 5 4;",
      "b) Programul este correct şi va afişa la execuţie 4.0 4;",
      "c)Va aparea eroare la compilare deoarece în clasa C2 s-a suprascris gresit atributul x din clasa C1;",
      "d)Va aparea eroare la compilare deoarece metoda suprascrisă f() din clasa C2 intoarce un tip diferit de void;"
    ],
    "correctAnswerIndexes": [3]
  },
  {
    "id": 37,
    "question": "O subclasă a unei clase abstracte poate fi instanţiată numai dacă:\na",
    "answers": [
      "a) Se foloseşte cuvantul cheie abstract;",
      "b) Suprascrie fiecare metodă declarată abstractă în superclasa sa, şi furnizeaza implementari pentru toate acestea;",
      "c) Se foloseşte moştenirea multiplă;",
      "d)O subclasă abstractă nu poate fi instanţiată;"
    ],
    "correctAnswerIndexes": [1]
  },
  {
    "id": 38,
    "question": "Urmatorul program Java:\nclass C1{\nint x=1;\nvoid f(int x){\nthis.x=x;}\nint getX_C1(){\nreturn x;}}\nclass C2 extends C1{\nfloat x=5.0f;\nvoid f(int x){\nsuper.f((int)x);}\nfloat getX_C2(){\nreturn x;}}\npublic class Test{\npublic static void main(String []args){\nC2 obiect = new C2();\nobiect.f(4);\nSystem.out.print(obiect.getX_C2() + \" \");\nSystem.out.println(obiect.getX_C1());}}\nAfişează:\n",
    "answers": [
      "a) Programul este corect şi va afişa la execuţie 5.0 4;",
      "b) Programul este correct şi va afişa la execuţie 4.0 4;",
      "c)Va aparea eroare la compilare deoarece în clasa C2 s-a suprascris gresit atributul x din clasa\nC1;",
      "d)Programul este correct şi va afişa la execuţie 5.0 5;"
    ],
    "correctAnswerIndexes": [0]
  },
  {
    "id": 39,
    "question": "Tipurile referința în Java sunt:\n",
    "answers": [
      "a) tabloul, clasa, interfața",
      "b) clasa, interfata",
      "c) int, flout, double, char, String",
      "d) String si null"
    ],
    "correctAnswerIndexes": [0]
  },
  {
    "id": 40,
    "question": "Secvența următoare:\npublic class numar_43_nou {\npublic static void main(String args[])\n{\nString sir=\"Examen\";\nsir.toUpperCase();\nSystem.out.println(sir);\n}\n}\nAfișează:\n",
    "answers": [
      "a) EXAMEN",
      "b) Examen",
      "c) eXamen",
      "d) Examen"
    ],
    "correctAnswerIndexes": [3]
  },
  {
    "id": 41,
    "question": "Secvența urătoare:\npublic class numar_44_nou {\npublic static void main(String args[])\n{\nString sir1=\"Programare in Java\";\nString sir2 =sir1.substring(4,8);\nSystem.out.println(sir2.toUpperCase());\n}\n}\nAfișează:\n",
    "answers": [
      "a) ogramare",
      "b) rama",
      "c) RAMA",
      "d) Java"
    ],
    "correctAnswerIndexes": [2]
  },
  {
    "id": 42,
    "question": "Secvența urătoare:\npublic class Test {\npublic static void main(String args[])\n{\nint numar = 1;\nfor (int x = 0; x < 4; x++)\nnumar = numar << 1;\nSystem.out.println(numar);}\n}\nAfișează:\n",
    "answers": [
      "a) 16",
      "b) 32",
      "c) 8",
      "d) 3"
    ],
    "correctAnswerIndexes": [0]
  },
  {
    "id": 43,
    "question": "O clasă abstractă în Java :\n",
    "answers": [
      "a) conține doar metode abstracte",
      "b) conține metode abstarcte, dar poate conține și metode definite",
      "c) poate fi instanțiată",
      "d) nu poate fi instanțiată, dar se pot definii referințe către acesta"
    ],
    "correctAnswerIndexes": [1,3]
  },
  {
    "id": 44,
    "question": "Secveţa următoare:\npublic class test {\npublic static void main(String args[]){\nString sir = \"Programare in Java, C++ este usoara\" ;\nString atom[]= sir.split(\"[ ,]\") ;\nSystem.out.println(atom.length) ;\n}}\nAfisează:\n",
    "answers": [
      "a) Eroare la compliare pentru ca nu se specifica numarul de elemente ale tabloului atom",
      "b) 2",
      "c) 6",
      "d) 5"
    ],
    "correctAnswerIndexes": [1]
  },
  {
    "id": 45,
    "question": "O clasă declarată final\n",
    "answers": [
      "a) clasa nu poate fi instanțiată",
      "b) orice cod exterior are acces la codul clasei",
      "c) implementează o interfață",
      "d) nu poate avea subclase"
    ],
    "correctAnswerIndexes": [3]
  },
  {
    "id": 46,
    "question": "Compozițiareprezintă\na. O relație de tip IS-A\nb. O relație de tip Can Do\nc. orelație de tip HAS-A.\nd. Niciorelație",
    "answers": [
      "a. O relație de tip IS-A",
      "b. O relație de tip Can Do",
      "c. orelație de tip HAS-A.",
      "d. Niciorelație"
    ],
    "correctAnswerIndexes": [2]
  },
  {
    "id": 47,
    "question": "Se consideră următorul fragment de cod:\nfor(int i=0;i<2;i++) {\nfor(int j=0;j<3;j++) {\nif(i==j) {\ncontinue;\n}\nSystem.out.println(\"i=\"+i+\" j=\"+j);\n}\n}\nCare linii vor face parte din output?\n",
    "answers": [
      "a) i=0 j=0",
      "b) i=0 j=1",
      "c) i=0 j=2",
      "d) i=1 j=0",
      "e) i=1 j=1"
    ],
    "correctAnswerIndexes": [1,2,3]
  },
  {
    "id": 48,
    "question": "Fie următorul program Java:\nclass Tablou{\nint[] met(int []a){\na[0] = -a[0];\na = new int[a.length];\na[0] = 1;\nreturn a;\n}\n}\npublic class Test{\npublic static void main(String[] args){\nint a[] = {1,2,3,4,5};\nint b[] = new Tablou().met(a);\nint s = 0;\nfor(int i = 0; i < a.length; i++) s = s + a[i] + b[i];\nSystem.out.println(s);\n}\n}\nDupă executarea programului, va fi afişată valoarea:\n",
    "answers": [
      "a) 30",
      "b) 14",
      "c) 28",
      "d) 15"
    ],
    "correctAnswerIndexes": [2]
  },
  {
    "id": 49,
    "question": "Considerăm următorul program Java:\nclass A{\npublic int x = 1;\npublic A() { x++; }\n}\nclass B extends A{\npublic B() { x++; }\n}\nclass C extends B{\npublic int x = 1;\npublic C() { x++; }\n}\npublic class Test{\npublic static void main(String[] args){\nB b = new B();\nC c = new C();\nSystem.out.println(b.x + \" \" + c.x);\n}\n}\nDupă executarea programului, va fi afişată valoarea:\n3 3\n3 4\n2 2\n3 2",
    "answers": [
      "3 3",
      "3 4",
      "2 2",
      "3 2"
    ],
    "correctAnswerIndexes": [3]
  },
  {
    "id": 50,
    "question": "Considerăm următorul program Java:\nclass C1{\nint x = 1;\nint f(int x) { return this.x + x; }\nint f(int x, int y) { return this.x + y; }\n}\nclass C2 extends C1{\nint f(int x) { return this.x; }\n}\npublic class Test{\npublic static void main(String[] args){\nC1 ob = new C2();\nSystem.out.println(ob.f(1) + ob.f(2,2));\n}\n}\nDupă executarea programului, va fi afişată valoarea:\n",
    "answers": [
      "a) 3",
      "b) 6",
      "c) 5",
      "d) 4"
    ],
    "correctAnswerIndexes": [3]
  },
  {
    "id": 51,
    "question": "După executarea secvenței de cod\nString s = \"Examen\", t = \"Examen\";\nif (s == t) System.out.print(\"A\");\nelse System.out.print(\"B\");\nif (s.equals(t)) System.out.print(\"C\");\nelse System.out.print(\"D\");\nse va afişa:\n",
    "answers": [
      "a) AD",
      "b) BC",
      "c) AC",
      "d) BD"
    ],
    "correctAnswerIndexes": [2]
  },
  {
    "id": 52,
    "question": "Fie următorul program Java:\nclass A { public int x = 0; }\npublic class Test{\npublic static A metoda() {\nA a = new A();\ntry{\na.x += 1;\nthrow new NullPointerException();\n} catch(Exception e) { a.x += 2; }\nfinally { a.x += 3; }\nreturn a;\n}\npublic static void main(String[] args){\nA ob = metoda();\nSystem.out.println(ob.x);\n}\n}\nDupă executarea programului, se va afişa:\n",
    "answers": [
      "a) 6",
      "b) 3",
      "c) 4",
      "d) Eroare la rulare (excepție NullPointerException\nnetratată)"
    ],
    "correctAnswerIndexes": [0]
  },
  {
    "id": 53,
    "question": "Precizați care dintre urmaătoarele afirmații sunt adevărate:\nI. o interfață poate să conțină câmpuri publice, statice și finale, respectiv metode\nstatice si metode implicite cu implementare\nII. o înterfață poate fi instanțiată\nIII. o clasă poate implementa mai multe interfețe\nIV. mai multe clase pot implementa aceeași interfață\n",
    "answers": [
      "a) I, II, IV",
      "b) I, III, IV",
      "c) II, III, IV",
      "d) I, II, III, IV"
    ],
    "correctAnswerIndexes": [1]
  },
  {
    "id": 54,
    "question": "Fie următorul program Java:\nclass A {\npublic static String f(String x) { return x+\"A\"; }\npublic String g(String x) { return x+\"B\"; }\n}\nclass B extends A {\npublic static String f(String x) { return x+\"C\"; }\npublic String g(String x) { return x+\"D\"; }\n}\npublic class Test {\npublic static void main(String[] args) {\nA a = new B();\nSystem.out.println(a.f(\"A\") + a.g(\"C\"));\n}\n}\nDupă executarea programului, se va afişa:\n",
    "answers": [
      "a) AACD",
      "b) ACCD",
      "c) AACB",
      "d) ACDC"
    ],
    "correctAnswerIndexes": [0]
  },
  {
    "id": 55,
    "question": "Un fir de executare în Java se poate defini:\n",
    "answers": [
      "a) printr-o instanță a clasei Runnable",
      "b) printr-o instanță a clasei Object",
      "c) printr-o instanță a clasei Thread",
      "d) printr-o instanță a clasei Clone"
    ],
    "correctAnswerIndexes": [2]
  },
  {
    "id": 56,
    "question": "Ce se va afișa dupa executarea următorului program Java:\n\npublic class Test {\n   public static void main(String[] args) {\n        HashMap m = new HashMap();\n        m.put(\"a\", null);\n        m.put(\"b\", \"JavaSE\");\n        m.put(\"c\", \"Python\");\n        m.put(null, \"PHP\");\n        m.put(null, null);\n\n        System.out.println(m);\n\n    }\n}",
    "answers": [
      "a) {null=null, a=null, b=JavaSE, c=Python}",
      "b) {a=null, b=JavaSE, c=Python}",
      "c) {null=PHP, a=null, b=JavaSE, c=Python}",
      "d) {Exepție la executare de tip NullPointerException}"
    ],
    "correctAnswerIndexes": [0]
  },
  {
    "id": 57,
    "question": "Ce se va afișa dupa executarea următorului program Java:\npublic class Test {\n   public static void main(String[] args) {\n        TreeMap m = new TreeMap();\n        m.put(\"a\", null);\n        m.put(\"b\", \"JavaSE\");\n        m.put(\"c\", \"Python\");\n        m.put(null, \"PHP\");\n        m.put(null, null);\n        System.out.println(m);\n    }\n}",
    "answers": [
      "a) {null=null, a=null, b=JavaSE, c=Python}",
      "b) {a=null, b=JavaSE, c=Python}",
      "c) {null=PHP, a=null, b=JavaSE, c=Python}",
      "d) Exepție la executare de tip NullPointerException"
    ],
    "correctAnswerIndexes": [3]
  },
  {
    "id": 58,
    "question": "Fie următorul program Java:\nclass Persoana implements Serializable {\n    String nume;\n    int varsta;\n    \n    public Persoana(String nume, int varsta) {\n        this.nume = nume;\n        this.varsta = varsta;\n        System.out.println(\"Constructor\");\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) throws Exception {\n        ObjectOutputStream oos = new ObjectOutputStream(\n                new FileOutputStream(\"persoana.ser\"));\n        Persoana p = new Persoana(\"Popescu Ion\", 40), q = p;\n        oos.writeObject(q);\n        oos.close();\n        ObjectInputStream ois = new ObjectInputStream(\n                new FileInputStream(\"persoana.ser\"));\n        Persoana r = (Persoana) ois.readObject();\n        ois.close();\n    }\n}\nDe câte ori va fi afișat mesajul Constructor, după executarea programului dat?",
    "answers": [
      "a) niciodată",
      "b) o dată",
      "c) de două ori",
      "d) de trei ori"
    ],
    "correctAnswerIndexes": [1]
  },
  {
    "id": 59,
    "question": "Fie secvența următoare de cod (presupunem că în clasa Persoana sunt implementate corect metodele get și set pentru datele membre String nume și double salariu):\n\n     listaPersoane.stream() \n.filter(p -> p.getNume().startsWith(\"\"B\"\")) \n.filter(p -> p.getSalariu() > 2000) \n.map(Persoana::getNume) \n.sorted() \n.map(o -> o.toString()) \n.collect(Collectors.joining(\"\",\"\"));\n\nCe va produce secvența de cod dată? ",
    "answers": [
      "a) șirul de caractere obținut prin concatenarea listei sortate a salariilor mai mari decât 2000 ale persoanelor ale căror nume începe cu B",
      "b) șirul de caractere obținut prin concatenarea listei sortate a numelor persoanelor care încep cu B și cu salarii mai mari decât 2000",
      "c) lungimea șirului de caractere produs prin concatenarea numelor persoanelor care încep cu B și cu salarii mai mari decât 2000",
      "d) lista formată din persoanele ale căror nume care încep cu B și au salarii mai mari decât 2000"
    ],
    "correctAnswerIndexes": [1]
  },
  {
    "id": 60,
    "question": "Fie următorul program Java:\n\n class Super {\n    public static void print() {\n        System.out.println(\"Super \");\n    }\n}\n\nclass Sub extends Super {\n    \n    public static void print() {\n        System.out.println(\"Sub\");\n    }\n}\n\npublic class Test {\n    public static void main(String args[]) {\n        Super p = new Sub();\n        Sub q = new Sub();\n        Super r = new Super();\n        p.print();\n        q.print();\n        r.print();\n    }}\n\n După executarea programului se va afișa:\n",
    "answers": [
      "a) Sub\nSub\nSub",
      "b) Sub\nSub\nSuper",
      "c) Super\nSuper\nSuper",
      "d) Super\nSub\nSuper"
    ],
    "correctAnswerIndexes": [3]
  }
]
