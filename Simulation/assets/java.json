[
  {
    "id": 1,
    "question": "Fie următoarea clasă Java:<br><br><div class=\"code\">class C<br>{<br>int a;<br>float x;<br>boolean b;<br>}</div><br><br>Stabiliţi care dintre următoarele linii de cod este corectă:",
    "answers": [
      "a) C ob = new C(1);",
      "b) C ob = new C(1,1.0);",
      "c) C ob = new C();",
      "d) C ob = new C(1,1.0,true);"
    ],
    "correctAnswerIndexes": [2]
  },
  {
    "id": 2,
    "question": "Fie următorul program Java:<br><br><div class=\"code\">class C<br>{<br>public static int a=1;<br>}<br>public class test<br>{<br>public static void main(String[] args)<br>{<br>C ob=new C();<br>C.a++;<br>ob.a++;<br>System.out.println(C.a);<br>}<br>}</div><br><br>După executarea programului, va fi afişată valoarea:",
    "answers": [
      "a) 3",
      "b) 2",
      "c) 1",
      "d) nicio valoare, se obține o eroare la executare."
    ],
    "correctAnswerIndexes": [0]
  },
  {
    "id": 3,
    "question": "Fie următorul program Java:<br><br><div class=\"code\">class C{public static int a=1;}<br>public class teste_grila<br>{<br>public static void main(String[] args)<br>{<br>C ob1=new C();<br>C ob2=new C();<br>ob1.a++;<br>System.out.println(ob2.a);<br>}<br>}</div><br><br>După executarea programului, va fi afişată valoarea:",
    "answers": [
      "a) 0;",
      "b) 2;",
      "c) 1;",
      "d) nicio valoare, se obține o eroare la executare."
    ],
    "correctAnswerIndexes": [1]
  },
  {
    "id": 4,
    "question": "Un program Test scris în limbajul Java poate fi compilat folosind comanda:",
    "answers": [
      "a) javac Test",
      "b) java Test.java",
      "c) javac Test.class",
      "d) javac Test.java"
    ],
    "correctAnswerIndexes": [3]
  },
  {
    "id": 5,
    "question": "Un program Test scris în limbajul Java şi compilat, poate fi rulat folosind comanda:",
    "answers": [
      "a) javac Test.java",
      "b) java Test",
      "c) java Test.class",
      "d) java Test.java"
    ],
    "correctAnswerIndexes": [1]
  },
  {
    "id": 6,
    "question": "În Java o clasă poate extinde:",
    "answers": [
      "a) cel mult o interfaţă",
      "b) oricâte clase",
      "c) cel mult o clasă",
      "d) oricâte interfeţe"
    ],
    "correctAnswerIndexes": [2]
  },
  {
    "id": 7,
    "question": "În Java o interfaţă poate extinde:",
    "answers": [
      "a) cel mult o interfată",
      "b) oricâte interfeţe",
      "c) cel mult o clasă",
      "d) oricâte clase"
    ],
    "correctAnswerIndexes": [1]
  },
  {
    "id": 8,
    "question": "În Java o clasă poate implementa:",
    "answers": [
      "a) o clasă",
      "b) oricâte clase",
      "c) o interfaţă",
      "d) oricâte interfeţe"
    ],
    "correctAnswerIndexes": [3]
  },
  {
    "id": 9,
    "question": "Fie următorul program Java:<br><br><div class=\"code\">class A<br>{<br>public A() { System.out.print(\"A\"); }<br>}<br>class B extends A<br>{<br>public B() { System.out.print(\"B\"); }<br>}<br>class C extends B<br>{<br>public C() { System.out.println(\"C\"); }<br>}<br>public class test<br>{<br>public static void main(String[] args)<br>{<br>C ob=new C();<br>}<br>}</div><br><br>După executarea programului, se va afişa:",
    "answers": [
      "a) A B C",
      "b) A",
      "c) C B A",
      "d) C"
    ],
    "correctAnswerIndexes": [0]
  },
  {
    "id": 10,
    "question": "Fie următorul program Java:<br><br><div class=\"code\">class A<br>{<br>public int x=1;<br>public A() { x++; }<br>}<br>class B extends A<br>{<br>public B() { x++; }<br>}<br>class C extends B<br>{<br>public int x=1;<br>public C() { x++; }<br>}<br>public class test<br>{<br>public static void main(String[] args)<br>{<br>B b=new B();<br>C c=new C();<br>System.out.println(b.x+\" \"+c.x);<br>}<br>}</div><br><br>După executarea programului, se va afişa:",
    "answers": [
      "a) 3 4",
      "b) 3 2",
      "c) 2 2",
      "d) 3 3"
    ],
    "correctAnswerIndexes": [1]
  },
  {
    "id": 11,
    "question": "Fie următorul program Java:<br><br><div class=\"code\">class A<br>{<br>int x=0;<br>public A(int n) { x=n; }<br>}<br>class B extends A<br>{<br>int x=1;<br>public B(int n) { super(n); }<br>}<br>public class test<br>{<br>public static void main(String[] args)<br>{<br>A a=new A(5);<br>B b=new B(7);<br>System.out.println(a.x+\" \"+b.x);<br>}<br>}</div><br><br>După executarea programului, se va afişa:",
    "answers": [
      "a) 05",
      "b) 51",
      "c) 57",
      "d) 01"
    ],
    "correctAnswerIndexes": [1]
  },
  {
    "id": 12,
    "question": "Fie următorul program Java:<br><br><div class=\"code\">class A{<br>static void staticMethod() {<br>System.out.println(\"Metoda statica\");<br>}<br>}<br>public class Test{<br>public static void main(String[] args){<br>A a = null;<br>a.staticMethod();<br>}<br>}</div><br><br>După executarea programului, se va afişa:",
    "answers": [
      "a) programul afișează mesajul Metoda statica",
      "b) se obține o eroare la compliare cauzată de faptul ca o metodă statică nu poate fi invocată<br>folosind o referintă",
      "c) se obține la executare excepția java.lang.NullPointerException"
    ],
    "correctAnswerIndexes": [0]
  },
  {
    "id": 13,
    "question": "Program următor:<br><br><div class=\"code\">class A<br>{<br>int x=10;<br>static int y=20;<br>}<br>class B extends A<br>{<br>int x=30;<br>static int y=40;<br>}<br>public class Test<br>{<br>public static void main(String[] args) {<br>A ob = new B();<br>System.out.println(ob.x+\" \"+ob.y);<br>}<br>}</div><br><br>Afișează",
    "answers": [
      "a) 10 20",
      "b) 30 40",
      "c) 30 20",
      "d) eroare la executare"
    ],
    "correctAnswerIndexes": [0]
  },
  {
    "id": 14,
    "question": "Care dintre următoarele afirmații este adevărată pentru o metodă de tip final?",
    "answers": [
      "a) poate fi și suprascrisă și supraîncărcată",
      "b) poate fi suprascrisă, dar nu poate fi supraîncărcată",
      "c) nu poate fi nici suprascrisă și nici supraîncărcată",
      "d) nu poate fi suprascrisă, dar poate fi supraîncărcată"
    ],
    "correctAnswerIndexes": [3]
  },
  {
    "id": 15,
    "question": "Programul următor:<br><br><div class=\"code\">public class Test {<br>static void test(int a[]){<br>a[0] = 100;<br>a = new int[]{10,20,30,40,50};<br>a[1] = 200;<br>System.out.println(Arrays.toString(a));<br>}<br>public static void main(String[] args){<br>int []v = {1,2,3,4,5,6,7};<br>test(v);<br>System.out.println(Arrays.toString(v));<br>}<br>}</div><br><br>Afișează",
    "answers": [
      "a) [10, 200, 30, 40, 50]<br>[1 2, 3, 4, 5, 6, 7]",
      "b) [10, 200, 30, 40, 50]<br>[100, 2, 3, 4, 5, 6, 7]",
      "c) [10, 20, 30, 40, 50]<br>[100, 2, 3, 4, 5, 6, 7]",
      "d) [10, 20, 30, 40, 50]<br>[100, 2, 3, 4, 5, 6, 7]"
    ],
    "correctAnswerIndexes": [1]
  },
  {
    "id": 16,
    "question": "Considerăm următorul program Java:<br><br><div class=\"code\">class C<br>{<br>int a,b;<br>public C(int x, int y){a=x; b=y;}<br>void f()<br>{<br>if(a<b) { a++; b--; g(); }<br>}<br>void g()<br>{<br>if(b>=a) { a++; b--; f(); }<br>}<br>void afisare() { System.out.println(a+\" \"+b);}<br>}<br>public class teste_grila<br>{<br>public static void main(String[] args)<br>{<br>C ob = new C(2,10);<br>ob.f(); ob.g();<br>ob.afisare();<br>}<br>}</div><br><br>După executarea programului, pe ecran se va afişa:",
    "answers": [
      "a) 57",
      "b) 6 6",
      "c) 2 10",
      "d) 7 5"
    ],
    "correctAnswerIndexes": [3]
  },
  {
    "id": 17,
    "question": "Considerăm următorul program Java:<br><br><div class=\"code\">class C<br>{<br>static int x = 0;<br>static int f() { return (++x)*(x--); }<br>}<br>public class teste_grila<br>{<br>public static void main(String[] args)<br>{<br>System.out.println(C.f()+\" \"+C.f()+\" \"+C.f());<br>}<br>}</div><br><br>După executarea programului, pe ecran se va afişa:",
    "answers": [
      "a) 1 1 1",
      "b) 1 2 3",
      "c) 1 2 6",
      "d) 0 0 0"
    ],
    "correctAnswerIndexes": [0]
  },
  {
    "id": 18,
    "question": "Considerăm următorul program Java:<br><br><div class=\"code\">class C<br>{<br>static int x=0;<br>static void f()<br>{<br>x = (++x)*(x--);<br>System.out.print(x+\" \");<br>}<br>}<br>public class teste_grila<br>{<br>public static void main(String[] args)<br>{<br>C.f();C.f();C.f();<br>}<br>}</div><br><br>După executarea programului, pe ecran se va afişa:",
    "answers": [
      "a) 0 0 0",
      "b) 1 4 25",
      "c) 1 -1 1",
      "d) 2 4 16"
    ],
    "correctAnswerIndexes": [1]
  },
  {
    "id": 19,
    "question": "Un fir de execuţie poate intra în starea \"blocat\" (blocked) astfel:",
    "answers": [
      "a) prin apelul metodei sleep();",
      "b) automat de către sistemul de operare;",
      "c) prin apelul metodei block();",
      "d) prin apelul metodei wait()."
    ],
    "correctAnswerIndexes": [0,3]
  },
  {
    "id": 20,
    "question": "Fie următorul program Java:<br><br><div class=\"code\">class Fir implements Runnable{<br>int x;<br>public Fir(int x){<br>this.x = x;<br>}<br>public void run(){<br>for (int i = 0; i < 10; i++) System.out.print(x);<br>}<br>public static void main(String args[]) throws<br>InterruptedException{<br>Fir obj1 = new Fir(1);<br>Fir obj2 = new Fir(2);<br>Thread t1 = new Thread(obj1);<br>Thread t2 = new Thread(obj2);<br>t1.start();<br>t2.start();<br>t2.join();<br>System.out.print(3);<br>}<br>}</div><br><br>După executarea programului, poate fi afişat un număr format din:",
    "answers": [
      "a) 10 cifre egale cu 1, 10 cifre egale cu 2 și o cifră egală cu 3, cifrele fiind în orice<br>ordine posibilă",
      "b) 10 cifre egale cu 1, 10 cifre egale cu 2 și o cifră egală cu 3, dar toate cifrele egale<br>cu 2 se vor afla înaintea cifrei 3",
      "c) 10 cifre egale cu 1, 10 cifre egale cu 2 și o cifră egală cu 3, dar toate cifrele egale<br>cu 1 sau 2 se vor afla înaintea cifrei 3",
      "d) 10 cifre egale cu 1, urmate de 10 cifre egale cu 2 și la sfârșit o cifră egală cu 3"
    ],
    "correctAnswerIndexes": [2]
  },
  {
    "id": 21,
    "question": "Considerăm următorul program Java:<br><br><div class=\"code\">class Sir{<br>private String sir;<br>public Sir(String sir){<br>this.sir = sir;<br>}<br>public void modificaSir(String sir){<br>this.sir = sir;<br>}<br>public void modificaSir(Sir sir){<br>sir = new Sir(\"Mihai\");<br>}<br>public String getSir(){<br>return sir;<br>}<br>}<br>public class Test {<br>public static void main(String[] args){<br>Sir s = new Sir(\"Ion\");<br>Sir t = new Sir(\"Alex\");<br>s.modificaSir(\"Matei\");<br>t.modificaSir(new Sir(\"Dan\"));<br>s.modificaSir(t);<br>System.out.println(s.getSir() + \" \" + t.getSir());<br>}<br>}</div><br><br>După executarea programului, va fi afişată valoarea:",
    "answers": [
      "a) Matei Dan",
      "b) Dan Dan",
      "c) Matei Alex",
      "d) Alex Dan"
    ],
    "correctAnswerIndexes": [2]
  },
  {
    "id": 22,
    "question": "Prin modalitatea sa de tratare a excepţiilor, Java oferă următoarele avantaje faţă demecanismul tradiţional de tratare a erorilor:",
    "answers": [
      "a) există o metodă care se ocupăde acest lucru;",
      "b) separarea codului pentru tratarea unei erori de codul în care ea poate sa apară;",
      "c) propagarea unei erori pâna la un analizor de excepţii corespunzător;",
      "d) gruparea erorilor dupa tipul lor."
    ],
    "correctAnswerIndexes": [1,2,3]
  },
  {
    "id": 23,
    "question": "O subclasă a unei clase abstracte poate fi instanţiată numai dacă:",
    "answers": [
      "a) se foloseşte cuvantul cheie abstract;",
      "b) suprascrie fiecare metodă declarată abstractă în superclasa sa şi furnizeaza implementări pentru toate acestea;",
      "c) se foloseşte moştenirea multiplă;",
      "d) subclasă abstractă nu poate fi instanţiată."
    ],
    "correctAnswerIndexes": [1]
  },
  {
    "id": 24,
    "question": "Care este rolul declaraţiilor import?",
    "answers": [
      "a) Permite referireaclaselorfărăutilizareade prefixe;",
      "b) Permite importul imaginilor folosite;",
      "c) Elimină necesitatea declarării variabilelor;",
      "d) Elimină apelurile directe ale funcţiilor fără clase."
    ],
    "correctAnswerIndexes": [0]
  },
  {
    "id": 25,
    "question": "Considerăm următorul program Java:<br><br><div class=\"code\">class Calcul_1{<br>void calcul(int a, int b){<br>System.out.print(a + b + \" \");<br>}<br>}<br>class Calcul_2 extends Calcul_1{<br>void calcul(int a, int b){<br>System.out.print(a - b + \" \");<br>}<br>}<br>class Calcul_3 extends Calcul_2{<br>void calcul(int a, int b){<br>System.out.print(a * b + \" \");<br>}<br>}<br>public class Test{<br>public static void main(String[] args){<br>Calcul_1 x = new Calcul_3();<br>x.calcul(1, 2);<br>Calcul_2 y = (Calcul_2) x;<br>y.calcul(3, 4);<br>Calcul_3 z = (Calcul_3) y;<br>z.calcul(5, 6);<br>}<br>}</div><br><br>După executarea programului, va fi afişată valoarea:",
    "answers": [
      "a) 2 12 30",
      "b) 3 -1 30",
      "c) 3 7 11",
      "d) 2 7 11"
    ],
    "correctAnswerIndexes": [0]
  },
  {
    "id": 26,
    "question": "Care dintre liniile de mai jos realizează atribuirea şirului „Hello Java” variabilei s ?",
    "answers": [
      "a) String s = \"Hello Java\";",
      "b) String s[] = \"Hello Java\";",
      "c) new String s = \"Hello Java\";",
      "d) String s = new String(\"Hello Java\");"
    ],
    "correctAnswerIndexes": [0,3]
  },
  {
    "id": 27,
    "question": "Ce se afisează dacă se execută următorul cod Java:<br><br><div class=\"code\">String s = new String( \"Computer\" );<br>if( s == \"Computer\" )<br>System.out.println( \"Equal A\" );<br>if( s.equals( \"Computer\" ) )<br>System.out.println( \"Equal B\" );</div><br>",
    "answers": [
      "a) Eroare la complilare, deoarece operatorul == nu se poate aplica pentru tipul String",
      "b) Se afisează mesajul “Equal A”",
      "c) Se afisează mesajul “Equal B”",
      "d) Se afişează ambele mesaje, “Equal A” , repsectiv “Equal B”"
    ],
    "correctAnswerIndexes": [2]
  },
  {
    "id": 28,
    "question": "În Java, metoda clone() a clasei Object",
    "answers": [
      "a) Creeaza un obiect nou al clasei folosind constructorul implicit",
      "b) Creeaza şi returnează o copie a obiectului curent",
      "c) Returneaza codul asociat constructorului implicit",
      "d) Testează dacă obiectul specificat este o clonă a obiectului current"
    ],
    "correctAnswerIndexes": [1]
  },
  {
    "id": 29,
    "question": "Un fir de executare Java este",
    "answers": [
      "a) O instanţă a unei clase derivate din clasa Thread",
      "b) O instanţă a unei clase care implementează interfaţa Runnable",
      "c) Fie un obiect al unei clase a carei superclasă este clasa Thread, fie un obiect al unei clase care implementează interfata Runnable"
    ],
    "correctAnswerIndexes": [0,1,2],
    "tobereviewd": "true"
  },
  {
    "id": 30,
    "question": "Fie următorul program Java:<br><br><div class=\"code\">public class Asignare {<br>public static void main(String args[]){<br>int a = 3;int b = (a = 2) * a;int c = b * (b = 5) ;<br>System.out.println(\"a = \" + a + \", b = \" + b + \", c = \" +<br>c);}}</div><br><br>Ce va afişa acesta la execuţie?<br>",
    "answers": [
      "a) a = 2, b = 4, c = 20",
      "b) a = 2, b = 5, c = 20",
      "c) a = 2, b = 5, c = 25",
      "d) a = 3, b = 6, c = 30"
    ],
    "correctAnswerIndexes": [1]
  },
  {
    "id": 31,
    "question": "Urmatorul subprogram Java:<br><br><div class=\"code\">int as=3, bs=2, cs=4;<br>System.out.print(((as < bs++) & (cs++ < bs)) + \" \");<br>System.out.println(as + \" \" + bs + \" \" + cs);<br>System.out.print(((as < bs++) && (os++ < bs++)) + \" \");<br>System.out.println(as + \" \" + bs + \" \" + cs);</div><br><br>Afişează:",
    "answers": [
      "a) Eroare la compilare: nu se poate aduna o valoare booleana cu un String;",
      "b) Subprogramul se compilează şi la execuţie afisează :false 3 3 5 false 3 4 4",
      "c) Subprogramul se compileaza şi la execuţie afisează:false 3 3 5 false 3 4 5",
      "a) Subprogramul se compileaza şi la execuţie afisează false 3 3 5 false 3 5 6"
    ],
    "correctAnswerIndexes": [2]
  },
  {
    "id": 32,
    "question": "Considerăm următorul program Java:<br><br><div class=\"code\">public class test<br>{<br>public static void main(String args[])<br>{<br>int v[ ]={-2,4,-5,-6,0,2},suma=0,i;<br>for(i=0;i<5;i++)<br>if(v[i]<-2) suma+=v[i];<br>System.out.println(suma);<br>}<br>}</div><br><br>După executarea programului, pe ecran se va afişa:",
    "answers": [
      "a) -7",
      "b) 0",
      "c) -11",
      "d) -13"
    ],
    "correctAnswerIndexes": [2]
  },
  {
    "id": 33,
    "question": "Secvenţa uramatoare:<br><br><div class=\"code\">public class test {<br>public static void main(String args[]){<br>String sir = \"Programare in Java, C++ este usoara\" ;<br>String atom[]= sir.split(\" \") ;<br>System.out.println(atom.length) ;<br>}}</div><br><br>Afisează:",
    "answers": [
      "a) Eroare la compliare pentru ca nu se specifica numarul de elemente ale tabloului atom",
      "b) 6",
      "c) 7",
      "d) 8"
    ],
    "correctAnswerIndexes": [1]
  },
  {
    "id": 34,
    "question": "Secvenţa uramatoare:<br><br><div class=\"code\">public class test{<br>public static void main(String args[]){<br>String sir = \"Programare in Java, C++ este usoara\" ;<br>String atom[]= sir.split(\" \") ;<br>System.out.println(atom[0].length()) ;<br>}}</div><br><br>Afisează:",
    "answers": [
      "Eroare la compliare pentru ca nu se specifica numarul de elemente ale tabloului atom",
      "b) 6",
      "c) 10",
      "d) 9"
    ],
    "correctAnswerIndexes": [2]
  },
  {
    "id": 35,
    "question": "Ce se va afişa la execuţia urmatorului program Java?<br>interface I1{<br>float x=2.3f;<br>}<br>public class Test implements I1{<br>public static void main(String [] args){<br>System.out.print(x+\" \");<br>x=6.7f;<br>System.out.print(x);<br>}<br>}</div><br><br>",
    "answers": [
      "a) Va aparea eroare la compilare deoarece valoarea variabilei x nu se mai poatemodifica;",
      "b) La execuţie se va afişa: 2.3f 6.7f;",
      "c) La execuţie se va afişa: 2.3f 2.3f;",
      "d) La execuţie se va afişa: 2.3 6.7;"
    ],
    "correctAnswerIndexes": [0]
  },
  {
    "id": 36,
    "question": "Urmatorul program Java:<br><br><div class=\"code\">class C1{<br>int x=1;<br>void f(int x){<br>this.x=x;}<br>int getX_C1(){<br>return x;}}<br>class C2 extends C1{<br>float x=5.0f;<br>int f(int x){<br>super.f((int)x);}<br>float getX_C2(){<br>return x;}}<br>public class Test{<br>public static void main(String []args){<br>C2 obiect = new C2();<br>obiect.f(4);<br>System.out.print(obiect.getX_C2() + \" \");<br>System.out.println(obiect.getX_C1());}}</div><br><br>Afişează:",
    "answers": [
      "a) Programul este corect şi va afişa la execuţie 5 4;",
      "b) Programul este correct şi va afişa la execuţie 4.0 4;",
      "c)Va aparea eroare la compilare deoarece în clasa C2 s-a suprascris gresit atributul x din clasa C1;",
      "d)Va aparea eroare la compilare deoarece metoda suprascrisă f() din clasa C2 intoarce un tip diferit de void;"
    ],
    "correctAnswerIndexes": [3]
  },
  {
    "id": 37,
    "question": "O subclasă a unei clase abstracte poate fi instanţiată numai dacă:<br><br><div class=\"code\">a",
    "answers": [
      "a) Se foloseşte cuvantul cheie abstract;",
      "b) Suprascrie fiecare metodă declarată abstractă în superclasa sa, şi furnizeaza implementari pentru toate acestea;",
      "c) Se foloseşte moştenirea multiplă;",
      "d)O subclasă abstractă nu poate fi instanţiată;"
    ],
    "correctAnswerIndexes": [1]
  },
  {
    "id": 38,
    "question": "Urmatorul program Java:<br><br><div class=\"code\">class C1{<br>int x=1;<br>void f(int x){<br>this.x=x;}<br>int getX_C1(){<br>return x;}}<br>class C2 extends C1{<br>float x=5.0f;<br>void f(int x){<br>super.f((int)x);}<br>float getX_C2(){<br>return x;}}<br>public class Test{<br>public static void main(String []args){<br>C2 obiect = new C2();<br>obiect.f(4);<br>System.out.print(obiect.getX_C2() + \" \");<br>System.out.println(obiect.getX_C1());}}</div><br><br>Afişează:",
    "answers": [
      "a) Programul este corect şi va afişa la execuţie 5.0 4;",
      "b) Programul este correct şi va afişa la execuţie 4.0 4;",
      "c)Va aparea eroare la compilare deoarece în clasa C2 s-a suprascris gresit atributul x din clasa<br>C1;",
      "d)Programul este correct şi va afişa la execuţie 5.0 5;"
    ],
    "correctAnswerIndexes": [0]
  },
  {
    "id": 39,
    "question": "Tipurile referința în Java sunt:<br><br><div class=\"code\">",
    "answers": [
      "a) tabloul, clasa, interfața",
      "b) clasa, interfata",
      "c) int, flout, double, char, String",
      "d) String si null"
    ],
    "correctAnswerIndexes": [0]
  },
  {
    "id": 40,
    "question": "Secvența următoare:<br><br><div class=\"code\">public class numar_43_nou {<br>public static void main(String args[])<br>{<br>String sir=\"Examen\";<br>sir.toUpperCase();<br>System.out.println(sir);<br>}<br>}</div><br><br>Afișează:",
    "answers": [
      "a) EXAMEN",
      "b) Examen",
      "c) eXamen",
      "d) Examen"
    ],
    "correctAnswerIndexes": [3],
    "tobereviewd": "true"
  },
  {
    "id": 41,
    "question": "Secvența urătoare:<br><br><div class=\"code\">public class numar_44_nou {<br>public static void main(String args[])<br>{<br>String sir1=\"Programare in Java\";<br>String sir2 =sir1.substring(4,8);<br>System.out.println(sir2.toUpperCase());<br>}<br>}</div><br><br>Afișează:",
    "answers": [
      "a) ogramare",
      "b) rama",
      "c) RAMA",
      "d) Java"
    ],
    "correctAnswerIndexes": [2]
  },
  {
    "id": 42,
    "question": "Secvența urătoare:<br><br><div class=\"code\">public class Test {<br>public static void main(String args[])<br>{<br>int numar = 1;<br>for (int x = 0; x < 4; x++)<br>numar = numar << 1;<br>System.out.println(numar);}<br>}</div><br><br>Afișează:",
    "answers": [
      "a) 16",
      "b) 32",
      "c) 8",
      "d) 3"
    ],
    "correctAnswerIndexes": [0]
  },
  {
    "id": 43,
    "question": "O clasă abstractă în Java :<br><br><div class=\"code\">",
    "answers": [
      "a) conține doar metode abstracte",
      "b) conține metode abstarcte, dar poate conține și metode definite",
      "c) poate fi instanțiată",
      "d) nu poate fi instanțiată, dar se pot definii referințe către acesta"
    ],
    "correctAnswerIndexes": [1,3]
  },
  {
    "id": 44,
    "question": "Secveţa următoare:<br><br><div class=\"code\">public class test {<br>public static void main(String args[]){<br>String sir = \"Programare in Java, C++ este usoara\" ;<br>String atom[]= sir.split(\"[ ,]\") ;<br>System.out.println(atom.length) ;<br>}}</div><br><br>Afisează:",
    "answers": [
      "a) Eroare la compliare pentru ca nu se specifica numarul de elemente ale tabloului atom",
      "b) 2",
      "c) 6",
      "d) 5"
    ],
    "correctAnswerIndexes": [1]
  },
  {
    "id": 45,
    "question": "O clasă declarată final<br>",
    "answers": [
      "a) clasa nu poate fi instanțiată",
      "b) orice cod exterior are acces la codul clasei",
      "c) implementează o interfață",
      "d) nu poate avea subclase"
    ],
    "correctAnswerIndexes": [3]
  },
  {
    "id": 46,
    "question": "Compozițiareprezintă<br>a. O relație de tip IS-A<br>b. O relație de tip Can Do<br>c. orelație de tip HAS-A.<br>d. Niciorelație",
    "answers": [
      "a. O relație de tip IS-A",
      "b. O relație de tip Can Do",
      "c. orelație de tip HAS-A.",
      "d. Niciorelație"
    ],
    "correctAnswerIndexes": [2]
  },
  {
    "id": 47,
    "question": "Se consideră următorul fragment de cod:<br><br><div class=\"code\">for(int i=0;i<2;i++) {<br>for(int j=0;j<3;j++) {<br>if(i==j) {<br>continue;<br>}<br>System.out.println(\"i=\"+i+\" j=\"+j);<br>}<br>}</div><br><br>Care linii vor face parte din output?<br>",
    "answers": [
      "a) i=0 j=0",
      "b) i=0 j=1",
      "c) i=0 j=2",
      "d) i=1 j=0",
      "e) i=1 j=1"
    ],
    "correctAnswerIndexes": [1,2,3]
  },
  {
    "id": 48,
    "question": "Fie următorul program Java:<br><br><div class=\"code\">class Tablou{<br>int[] met(int []a){<br>a[0] = -a[0];<br>a = new int[a.length];<br>a[0] = 1;<br>return a;<br>}<br>}<br>public class Test{<br>public static void main(String[] args){<br>int a[] = {1,2,3,4,5};<br>int b[] = new Tablou().met(a);<br>int s = 0;<br>for(int i = 0; i < a.length; i++) s = s + a[i] + b[i];<br>System.out.println(s);<br>}<br>}</div><br><br>După executarea programului, va fi afişată valoarea:",
    "answers": [
      "a) 30",
      "b) 14",
      "c) 28",
      "d) 15"
    ],
    "correctAnswerIndexes": [2]
  },
  {
    "id": 49,
    "question": "Considerăm următorul program Java:<br><br><div class=\"code\">class A{<br>public int x = 1;<br>public A() { x++; }<br>}<br>class B extends A{<br>public B() { x++; }<br>}<br>class C extends B{<br>public int x = 1;<br>public C() { x++; }<br>}<br>public class Test{<br>public static void main(String[] args){<br>B b = new B();<br>C c = new C();<br>System.out.println(b.x + \" \" + c.x);<br>}<br>}</div><br><br>După executarea programului, va fi afişată valoarea:",
    "answers": [
      "3 3",
      "3 4",
      "2 2",
      "3 2"
    ],
    "correctAnswerIndexes": [3]
  },
  {
    "id": 50,
    "question": "Considerăm următorul program Java:<br><br><div class=\"code\">class C1{<br>int x = 1;<br>int f(int x) { return this.x + x; }<br>int f(int x, int y) { return this.x + y; }<br>}<br>class C2 extends C1{<br>int f(int x) { return this.x; }<br>}<br>public class Test{<br>public static void main(String[] args){<br>C1 ob = new C2();<br>System.out.println(ob.f(1) + ob.f(2,2));<br>}<br>}</div><br><br>După executarea programului, va fi afişată valoarea:",
    "answers": [
      "a) 3",
      "b) 6",
      "c) 5",
      "d) 4"
    ],
    "correctAnswerIndexes": [3]
  },
  {
    "id": 51,
    "question": "După executarea secvenței de cod<br>String s = \"Examen\", t = \"Examen\";<br>if (s == t) System.out.print(\"A\");<br>else System.out.print(\"B\");<br>if (s.equals(t)) System.out.print(\"C\");<br>else System.out.print(\"D\");<br>se va afişa:<br><br><div class=\"code\">",
    "answers": [
      "a) AD",
      "b) BC",
      "c) AC",
      "d) BD"
    ],
    "correctAnswerIndexes": [2]
  },
  {
    "id": 52,
    "question": "Fie următorul program Java:<br><br><div class=\"code\">class A { public int x = 0; }<br>public class Test{<br>public static A metoda() {<br>A a = new A();<br>try{<br>a.x += 1;<br>throw new NullPointerException();<br>} catch(Exception e) { a.x += 2; }<br>finally { a.x += 3; }<br>return a;<br>}<br>public static void main(String[] args){<br>A ob = metoda();<br>System.out.println(ob.x);<br>}<br>}</div><br><br>După executarea programului, se va afişa:",
    "answers": [
      "a) 6",
      "b) 3",
      "c) 4",
      "d) Eroare la rulare (excepție NullPointerException<br>netratată)"
    ],
    "correctAnswerIndexes": [0]
  },
  {
    "id": 53,
    "question": "Precizați care dintre urmaătoarele afirmații sunt adevărate:<br><br><div class=\"code\">I. o interfață poate să conțină câmpuri publice, statice și finale, respectiv metode<br>statice si metode implicite cu implementare<br>II. o înterfață poate fi instanțiată<br>III. o clasă poate implementa mai multe interfețe<br>IV. mai multe clase pot implementa aceeași interfață<br>",
    "answers": [
      "a) I, II, IV",
      "b) I, III, IV",
      "c) II, III, IV",
      "d) I, II, III, IV"
    ],
    "correctAnswerIndexes": [1]
  },
  {
    "id": 54,
    "question": "Fie următorul program Java:<br><br><div class=\"code\">class A {<br>public static String f(String x) { return x+\"A\"; }<br>public String g(String x) { return x+\"B\"; }<br>}<br>class B extends A {<br>public static String f(String x) { return x+\"C\"; }<br>public String g(String x) { return x+\"D\"; }<br>}<br>public class Test {<br>public static void main(String[] args) {<br>A a = new B();<br>System.out.println(a.f(\"A\") + a.g(\"C\"));<br>}<br>}</div><br><br>După executarea programului, se va afişa:",
    "answers": [
      "a) AACD",
      "b) ACCD",
      "c) AACB",
      "d) ACDC"
    ],
    "correctAnswerIndexes": [0]
  },
  {
    "id": 55,
    "question": "Un fir de executare în Java se poate defini:<br><br><div class=\"code\">",
    "answers": [
      "a) printr-o instanță a clasei Runnable",
      "b) printr-o instanță a clasei Object",
      "c) printr-o instanță a clasei Thread",
      "d) printr-o instanță a clasei Clone"
    ],
    "correctAnswerIndexes": [2],
    "tobereviewd": "true"
  },
  {
    "id": 56,
    "question": "Ce se va afișa dupa executarea următorului program Java:<br><br><div class=\"code\"><br>public class Test {<br>   public static void main(String[] args) {<br>        HashMap m = new HashMap();<br>        m.put(\"a\", null);<br>        m.put(\"b\", \"JavaSE\");<br>        m.put(\"c\", \"Python\");<br>        m.put(null, \"PHP\");<br>        m.put(null, null);<br><br>        System.out.println(m);<br><br>    }<br>}</div><br>",
    "answers": [
      "a) {null=null, a=null, b=JavaSE, c=Python}",
      "b) {a=null, b=JavaSE, c=Python}",
      "c) {null=PHP, a=null, b=JavaSE, c=Python}",
      "d) {Exepție la executare de tip NullPointerException}"
    ],
    "correctAnswerIndexes": [0]
  },
  {
    "id": 57,
    "question": "Ce se va afișa dupa executarea următorului program Java:<br><br><div class=\"code\">public class Test {<br>   public static void main(String[] args) {<br>        TreeMap m = new TreeMap();<br>        m.put(\"a\", null);<br>        m.put(\"b\", \"JavaSE\");<br>        m.put(\"c\", \"Python\");<br>        m.put(null, \"PHP\");<br>        m.put(null, null);<br>        System.out.println(m);<br>    }<br>}</div><br>",
    "answers": [
      "a) {null=null, a=null, b=JavaSE, c=Python}",
      "b) {a=null, b=JavaSE, c=Python}",
      "c) {null=PHP, a=null, b=JavaSE, c=Python}",
      "d) Exepție la executare de tip NullPointerException"
    ],
    "correctAnswerIndexes": [3]
  },
  {
    "id": 58,
    "question": "Fie următorul program Java:<br><br><div class=\"code\">class Persoana implements Serializable {<br>    String nume;<br>    int varsta;<br>    <br>    public Persoana(String nume, int varsta) {<br>        this.nume = nume;<br>        this.varsta = varsta;<br>        System.out.println(\"Constructor\");<br>    }<br>}<br><br>public class Test {<br>    public static void main(String[] args) throws Exception {<br>        ObjectOutputStream oos = new ObjectOutputStream(<br>                new FileOutputStream(\"persoana.ser\"));<br>        Persoana p = new Persoana(\"Popescu Ion\", 40), q = p;<br>        oos.writeObject(q);<br>        oos.close();<br>        ObjectInputStream ois = new ObjectInputStream(<br>                new FileInputStream(\"persoana.ser\"));<br>        Persoana r = (Persoana) ois.readObject();<br>        ois.close();<br>    }<br>}</div><br><br>De câte ori va fi afișat mesajul Constructor, după executarea programului dat?",
    "answers": [
      "a) niciodată",
      "b) o dată",
      "c) de două ori",
      "d) de trei ori"
    ],
    "correctAnswerIndexes": [1]
  },
  {
    "id": 59,
    "question": "Fie secvența următoare de cod (presupunem că în clasa Persoana sunt implementate corect metodele get și set pentru datele membre String nume și double salariu):<br><br><div class=\"code\"><br>     listaPersoane.stream() <br>.filter(p -> p.getNume().startsWith(\"\"B\"\")) <br>.filter(p -> p.getSalariu() > 2000) <br>.map(Persoana::getNume) <br>.sorted() <br>.map(o -> o.toString()) <br>.collect(Collectors.joining(\"\",\"\"));</div><br><br>Ce va produce secvența de cod dată? ",
    "answers": [
      "a) șirul de caractere obținut prin concatenarea listei sortate a salariilor mai mari decât 2000 ale persoanelor ale căror nume începe cu B",
      "b) șirul de caractere obținut prin concatenarea listei sortate a numelor persoanelor care încep cu B și cu salarii mai mari decât 2000",
      "c) lungimea șirului de caractere produs prin concatenarea numelor persoanelor care încep cu B și cu salarii mai mari decât 2000",
      "d) lista formată din persoanele ale căror nume care încep cu B și au salarii mai mari decât 2000"
    ],
    "correctAnswerIndexes": [1]
  },
  {
    "id": 60,
    "question": "Fie următorul program Java:<br><br><div class=\"code\"><br> class Super {<br>    public static void print() {<br>        System.out.println(\"Super \");<br>    }<br>}<br><br>class Sub extends Super {<br>    <br>    public static void print() {<br>        System.out.println(\"Sub\");<br>    }<br>}<br><br>public class Test {<br>    public static void main(String args[]) {<br>        Super p = new Sub();<br>        Sub q = new Sub();<br>        Super r = new Super();<br>        p.print();<br>        q.print();<br>        r.print();<br>    }}</div><br><br> După executarea programului se va afișa:",
    "answers": [
      "a) Sub<br>Sub<br>Sub",
      "b) Sub<br>Sub<br>Super",
      "c) Super<br>Super<br>Super",
      "d) Super<br>Sub<br>Super"
    ],
    "correctAnswerIndexes": [3]
  }
]
